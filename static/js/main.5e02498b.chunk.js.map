{"version":3,"sources":["costText.js","App.js","serviceWorker.js","index.js"],"names":["isSpecialDay","today","getDay","hd","Holidays","isHoliday","indexOf","name","getRelevantTable","type","a","Date","data","hourToPriceRegular","hourToPriceWeekendHoliday","getText","table","nextTable","ans","getHours","nextHour","nextChangeFound","tomorrow","setDate","getDate","Road","useState","text","setText","useEffect","fetchData","interval","setInterval","clearInterval","Pick","href","App","className","window","location","search","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ktCAGMA,EAAe,SAACC,GACpB,GAAuB,IAAnBA,EAAMC,UAAqC,IAAnBD,EAAMC,SAChC,OAAO,EAGT,IAAIC,EAAK,IAAIC,IAAS,MAStB,OACED,EAAGE,UAAUJ,IATI,CACjB,YACA,eACA,mBACA,YACA,eACA,iBAGkCK,QAAQH,EAAGE,UAAUJ,GAAOM,OAAS,GAIrEC,EAAgB,uCAAG,WAAOC,GAAP,iCAAAC,EAAA,yDAAaT,EAAb,+BAAqB,IAAIU,KAAzB,EACmCC,EAAKH,GAAvDI,EADe,EACfA,mBAAoBC,EADL,EACKA,2BAExBd,EAAaC,GAHM,yCAIda,GAJc,gCAMdD,GANc,2CAAH,sDAWTE,EAAO,uCAAG,WAAON,GAAP,2BAAAC,EAAA,mFAEfT,EAAQ,IAAIU,KAFG,SAGDH,EAAiBC,GAHhB,OAGfO,EAHe,OAIjBC,EAAYD,EACZE,EAAM,GAGRA,GADW,QAATT,EACK,wBAEA,uBAGTS,GAAOF,EAAMf,EAAMkB,YACnBD,GAAO,IAEHE,EAAWnB,EAAMkB,WAAa,GAC9BE,GAAkB,EAjBD,WAkBbA,EAlBa,qBAmBnBD,GAAsB,IACN,KACdA,GAAsB,IAChBE,EAAW,IAAIX,KAAKV,IACjBsB,QAAQD,EAASE,UAAY,GACtCP,EAAYT,EAAiBC,EAAMa,IAGjCF,IAAanB,EAAMkB,WA3BJ,0CA4BVD,GA5BU,QA+BnBG,EAAkBL,EAAMf,EAAMkB,cAAgBF,EAAUG,GA/BrC,+BAkCrBF,GACE,iBACAF,EAAMI,GACN,QACc,IAAbA,EAAiB,KAAOA,EAAW,IACpC,KACCA,EAAW,GAAK,KAAO,MACxB,IAzCmB,kBA2CdF,GA3Cc,4CAAH,sD,cC3BpB,SAASO,EAAT,GAAuB,IAARlB,EAAO,EAAPA,KAAO,EACImB,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,KAcpB,OAZAC,qBAAU,WAAO,SACAC,IADD,2EACd,sBAAApB,EAAA,kEACEkB,EADF,SACgBb,EAAQR,GADxB,8EADc,sBAId,IAAIwB,EAAWC,aAAY,WACzBF,MACC,KAGH,OADAA,IACO,kBAAMG,cAAcF,MAC1B,CAACxB,IAEG,oCAAGoB,GAGZ,SAASO,IACP,OAAO,4BACL,4BACE,uBAAGC,KAAK,OAAR,OAEF,4BACE,uBAAGA,KAAK,QAAR,SAyBSC,MApBf,WACE,OACE,kBAAC,IAAD,CAAUC,UAAU,OAClB,yBAAKA,UAAU,QACb,WACA,OAAOC,OAAOC,SAASC,QACrB,IAAK,OACH,OAAO,kBAACf,EAAD,CAAMlB,KAAK,QACpB,IAAK,MACH,OAAO,kBAACkB,EAAD,CAAMlB,KAAK,OACpB,QACE,OAAO,kBAAC2B,EAAD,OAPX,MC1BYO,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e02498b.chunk.js","sourcesContent":["import Holidays from \"date-holidays\";\nimport data from \"./data/data\";\n\nconst isSpecialDay = (today) => {\n  if (today.getDay() === 6 || today.getDay() === 0) {\n    return true;\n  }\n\n  var hd = new Holidays(\"US\");\n  const applicable = [\n    \"New Years\",\n    \"Memorial Day\",\n    \"Independence Day\",\n    \"Labor Day\",\n    \"Thanksgiving\",\n    \"Christmas Day\",\n  ];\n  return (\n    hd.isHoliday(today) && applicable.indexOf(hd.isHoliday(today).name) >= 0\n  );\n};\n\nconst getRelevantTable = async (type, today = new Date()) => {\n  const { hourToPriceRegular, hourToPriceWeekendHoliday } = data[type];\n\n  if (isSpecialDay(today)) {\n    return hourToPriceWeekendHoliday;\n  } else {\n    return hourToPriceRegular;\n  }\n};\n\nlet textAns = null;\nexport const getText = async (type) => {\n  if (textAns) return textAns;\n  const today = new Date();\n  const table = await getRelevantTable(type);\n  let nextTable = table;\n  let ans = \"\";\n\n  if (type === \"520\") {\n    ans += \"The 520 bridge costs \";\n  } else {\n    ans += \"The 99 tunnel costs \";\n  }\n\n  ans += table[today.getHours()];\n  ans += \".\";\n\n  let nextHour = today.getHours() % 24;\n  let nextChangeFound = false;\n  while (!nextChangeFound) {\n    nextHour = nextHour + 1;\n    if (nextHour >= 24) {\n      nextHour = nextHour % 24;\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      nextTable = getRelevantTable(type, tomorrow);\n    }\n\n    if (nextHour === today.getHours()) {\n      return ans;\n    }\n\n    nextChangeFound = table[today.getHours()] !== nextTable[nextHour];\n  }\n\n  ans +=\n    \" It will cost \" +\n    table[nextHour] +\n    \" at \" +\n    (nextHour === 0 ? \"12\" : nextHour % 12) +\n    \" \" +\n    (nextHour < 12 ? \"AM\" : \"PM\") +\n    \".\";\n\n  return ans;\n};\n","import React, {useEffect, useState} from 'react';\nimport {getText} from './costText';\nimport Div100vh from 'react-div-100vh'\n\nimport './App.css';\n\nfunction Road({name}) {\n  const [text, setText] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      setText(await getText(name))\n    }\n    let interval = setInterval(() => {\n      fetchData();\n    }, 60 * 1000);\n\n    fetchData();\n    return () => clearInterval(interval);\n  }, [name]);\n\n  return <>{text}</>\n}\n\nfunction Pick() {\n  return <ul>\n    <li>\n      <a href=\"?99\">99</a>\n    </li>\n    <li>\n      <a href=\"?520\">520</a>\n    </li>\n  </ul>;\n}\n\nfunction App() {\n  return (\n    <Div100vh className=\"App\">\n      <div className=\"text\">\n      {(() => {\n        switch(window.location.search) {\n          case \"?520\":\n            return <Road name=\"520\"/>;\n          case \"?99\":\n            return <Road name=\"99\"/>;\n          default: \n            return <Pick/>;\n        }\n        })()\n      }\n      </div>\n    </Div100vh>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}