{"version":3,"sources":["costText.js","App.js","serviceWorker.js","index.js"],"names":["textToHour","text","nText","toLowerCase","trim","parts","split","hour","parseInt","buildTable","url","firstColName","secondColName","a","fetch","raw","converted","HtmlTableToJson","parse","results","hourToPriceRegular","Array","from","hourToPriceWeekendHoliday","table","col","ans","forEach","row","timeParts","price","length","i","j","buildTables","road520Regular","road520Special","road99Regular","road99Special","isSpecialDay","today","Date","getDay","hd","Holidays","applicable","isHoliday","indexOf","name","getRelevantTable","type","getText","getHours","nextHour","nextChangeFound","App","useState","setText","useEffect","fetchData","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94dc3677.chunk.js","sourcesContent":["import HtmlTableToJson from 'html-table-to-json';\nimport Holidays from 'date-holidays';\nconst textToHour = text => {\n  const nText = text.toLowerCase().trim();\n  if (nText === \"midnight\") return 0;\n  const parts = nText.split(\" \");\n  let hour = parseInt(parts[0]);\n  if (parts[1] == \"p.m.\") hour += 12;\n  return hour;\n};\n\nconst buildTable = async (url, firstColName, secondColName) => {\n  \n  const raw = await (await fetch(`https://api.codetabs.com/v1/proxy?quest=${url}`)).text();\n  const converted = HtmlTableToJson.parse(raw).results;\n  const hourToPriceRegular = Array.from(Array(24));\n  const hourToPriceWeekendHoliday = Array.from(Array(24));\n  [\n    {\n      table: converted[0],\n      col: firstColName,\n      ans: hourToPriceRegular\n    },\n    {\n      table: converted[1],\n      col: secondColName,\n      ans: hourToPriceWeekendHoliday\n    }\n  ].forEach(({ table, col, ans }) => {\n    table.forEach(row => {\n      const timeParts = row[col].split(\"to\");\n      const price = row[\"Good To Go! Pass\"];\n      if (timeParts.length == 1 && timeParts[0] === \"All day\") {\n        for (var j = 0; j < 24; j++) ans[j] = price;\n        return;\n      }\n      let i = textToHour(timeParts[0]);\n      while (i != textToHour(timeParts[1])) {\n        ans[i] = price;\n        i = (i + 1) % 24;\n      }\n    });\n  });\n\n  return { hourToPriceRegular, hourToPriceWeekendHoliday };\n};\n\nconst buildTables = async () => {\n  const {\n    hourToPriceRegular: road520Regular,\n    hourToPriceWeekendHoliday: road520Special\n  } = await buildTable(\n    \"https://wsdot.wa.gov/Tolling/520/520tollrates.htm\",\n    \"Monday - Friday\",\n    \"Weekends and Holidays**\"\n  );\n\n  const {\n    hourToPriceRegular: road99Regular,\n    hourToPriceWeekendHoliday: road99Special\n  } = await buildTable(\n    \"https://wsdot.wa.gov/tolling/sr-99-tunnel-toll-rates\",\n    \"Monday through Friday\",\n    \"Weekends\"\n  );\n\n  return {\n    road520Regular,\n    road520Special,\n    road99Regular,\n    road99Special\n  };\n};\n\nconst isSpecialDay = (today = new Date()) => {\n  if (today.getDay() === 6 || today.getDay() === 0) {\n    return true;\n  }\n\n  var hd = new Holidays('US')\n  const applicable = [\n      \"New Years\",\n      \"Memorial Day\",\n      \"Independence Day\",\n      \"Labor Day\",\n      \"Thanksgiving\",\n      \"Christmas Day\"\n    ];\n  return hd.isHoliday(today) && applicable.indexOf(hd.isHoliday(today).name) >= 0;\n};\n\nconst getRelevantTable = async type => {\n  const {\n    road520Regular,\n    road520Special,\n    road99Regular,\n    road99Special\n  } = await buildTables();\n\n  if (type == \"520\") {\n    if (isSpecialDay()) {\n      return road520Special;\n    } else {\n      return road520Regular;\n    }\n  } else {\n    if (isSpecialDay()) {\n      return road99Regular;\n    } else {\n      return road99Special;\n    }\n  }\n};\n\nexport const getText = async type => {\n  \n  const today = new Date();\n  const table = await getRelevantTable(type);\n  let ans = \"\";\n\n  if (type === \"520\") {\n    ans += \"The 520 bridge costs \";\n  } else {\n    ans += \"The 99 tunnel costs \";\n  }\n\n  ans += table[today.getHours()];\n  ans += \".\";\n\n  let nextHour = (today.getHours()) % 24;\n  let nextChangeFound = false;\n  while(!nextChangeFound) {\n    nextHour = (nextHour + 1) % 24\n    if(nextHour === today.getHours()){\n      return ans;\n    }\n\n    nextChangeFound = table[today.getHours()] !== table[nextHour];\n  }\n\n  ans +=\n      \" It will cost \" +\n      table[nextHour] +\n      \" at \" +\n      (nextHour == 0 ? \"12\" : nextHour % 12) +\n      \" \" +\n      (nextHour < 12 ? \"AM\" : \"PM\") +\n      \".\";\n  \n  return ans;\n};\n\n","import React, {useEffect, useState} from 'react';\nimport {getText} from './costText';\nimport './App.css';\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      setText(await getText(\"520\"))\n    }\n    fetchData();\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"text\">\n      {text}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}